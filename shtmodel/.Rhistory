data$shtorders_60d <- as.integer(data$shtorders_60d)
# transform metrics
data$recommendlevel <- ifelse(data$recommendlevel>= 11 | data$recommendlevel <= 0 | is.na(data$recommendlevel), -1
, data$recommendlevel)  #  超过10 和小于0的看做一类别，跟其他类别的量级持平；
data$last3droompct <- ifelse(data$last3droompct > 1, 1, data$last3droompct)
# data$last3droom_sht <- ifelse(data$last3droom_sht >= 7 , 7, data$last3droom_sht)
# data$bin_hasreserved <- ifelse(data$canuserooms>0,1,0)
# data$bin_roomhasnoroom <- ifelse(data$last7dnoroom>0,1,0) # 看酒店和房型历史是否出现过满房订单；
data[is.na(data)] <- -1         # # 把一些因子的NA变成 -1
data <- mutate(data, ifelse(canuserooms<0,-1, canuserooms)
, htlnoroomrate_7d = ifelse(htlnoroomrate_7d>1 , 1 ,htlnoroomrate_7d)
, star=ifelse(star<0, 0, star)
, goldstar=ifelse(goldstar<0, 2, goldstar)
, price=ifelse(firstunitprice>1200, 12, 0)
, price=ifelse(firstunitprice>800 & firstunitprice<=1200 ,8,price)
, price=ifelse(firstunitprice>600 & firstunitprice<=800 ,6,price)
, price=ifelse(firstunitprice>400 & firstunitprice<=600,4,price)
, price=ifelse(firstunitprice>300 & firstunitprice<=400,3,price)
, price=ifelse(firstunitprice>200 & firstunitprice<=300,2,price)
, price=ifelse(firstunitprice<=200,1,price)
)
# 预测最后的的结果 ，只用一种模型来进行预测；
data$pred <- tryCatch(predict(virtualroom.sht, newdata= data, n.trees = best.virtualroom.sht, type="response") ,warning = 'predict error')
#  data$pred <- ifelse(data$htlnoroomorders_7d>=1, 1, data$pred)  # 同母酒店的现、预付酒店last7d无房的房量高于0
#  data$pred <- ifelse(data$last7dnoroom>=1, 1, data$pred)  # 同子酒店的last7d无房的房量高于0
return(list(orderid= data$orderid, score= data$pred))
}  else  {
return(list(orderid= -1, score= 99))
}
}
calcReservedRoomForVendor("1802647013,-1,-1,-1,-1,-1.0,-1,-1,-1,-1,-1,-1,-1,-1,655,-1,-1,145,-1,127,-1,145,-1.0,-1.0,-1.0,20,T,10,1000")
# calcReservedRoomForVendor("1802647013,-1,-1,-1,-1,-1.0,-1,-1,-1,-1,-1,-1,-1,-1,655,-1,-1,145,-1,127,-1,145,-1.0,-1.0,-1.0,20,T,10,1000")
calcReservedRoomForVendor <- function(inParam)
{
# package申明；
if(!require(gbm)) install.packages("gbm")
if(!require(dplyr)) install.packages("dplyr")
#package的引用
library(gbm)
library(dplyr)
options(stringsAsFactors = FALSE) #  char类型不要自动转化成 factor
# setwd(getwd())
# rm(list=ls())
# debug
load("/home/pjpan/shtmodel/ProdScripts/ReservedRoomForVendor.RData")
# load data-Versions1
if(is.character(inParam))
{
rawdata <- strsplit(c(inParam), ",")
data <- as.data.frame(do.call(rbind, rawdata))
}
if(length(data) == 29)
{
names(data) <- c(
"orderid",
"cityi",
"gcity",
"gintense",
"gzone",
"intense",
"zonei",
"zonestari",
"htlnoroomorders_7d",
"htlnoroomrate_7d",
"last3droom_sht",
"last3droompct",
"last7dnoroom",
"last7droom_sht",
"htlnoroomrate_60d",
"htlorders_60d",
"noroomrate_60d",
"shtnoroomrate_60d",
"shtorders_60d",
"zonenoroomrate_3d",
"ordhour",
"ordprior",
"recommendlevel",
"goldstar",
"star",
"roomquantity",
"freesale",
"canuserooms",
"firstunitprice"
)
# View(data)
# transform the data
# string -> numeric
data$cityi <- as.numeric(data$cityi)
data$gcity <- as.numeric(data$gcity)
data$gintense <- as.numeric(data$gintense)
data$gzone <- as.numeric(data$gzone)
data$intense <- as.numeric(data$intense)
data$zonei <- as.numeric(data$zonei)
data$zonestari <- as.numeric(data$zonestari)
data$htlnoroomrate_7d <- as.numeric(data$htlnoroomrate_7d)
data$shtnoroomrate_60d <- as.numeric(data$shtnoroomrate_60d)
data$noroomrate_60d <- as.numeric(data$noroomrate_60d)
data$last3droompct <- as.numeric(data$last3droompct)
data$htlnoroomrate_60d <- as.numeric(data$htlnoroomrate_60d)
data$zonenoroomrate_3d <- as.numeric(data$zonenoroomrate_3d)
data$freesale <- as.character(data$freesale)
# # string -> integer
data$htlnoroomorders_7d <- as.integer(data$htlnoroomorders_7d)
data$last3droom_sht <- as.integer(data$last3droom_sht)
data$last7dnoroom <- as.integer(data$last7dnoroom)
data$last7droom_sht <- as.integer(data$last7droom_sht)
data$htlorders_60d <- as.integer(data$htlorders_60d)
data$roomquantity <- as.integer(data$roomquantity)
data$canuserooms <- as.integer(data$canuserooms)
data$firstunitprice <- as.integer(data$firstunitprice)
# # string -> factor
data$ordhour <- as.integer(data$ordhour)
data$star <- as.integer(data$star)
data$goldstar <- as.integer(data$goldstar)
data$recommendlevel <- as.integer(data$recommendlevel)
data$ordprior <- as.integer(data$ordprior)
data$shtorders_60d <- as.integer(data$shtorders_60d)
# transform metrics
data$recommendlevel <- ifelse(data$recommendlevel>= 11 | data$recommendlevel <= 0 | is.na(data$recommendlevel), -1
, data$recommendlevel)  #  超过10 和小于0的看做一类别，跟其他类别的量级持平；
data$last3droompct <- ifelse(data$last3droompct > 1, 1, data$last3droompct)
# data$last3droom_sht <- ifelse(data$last3droom_sht >= 7 , 7, data$last3droom_sht)
# data$bin_hasreserved <- ifelse(data$canuserooms>0,1,0)
# data$bin_roomhasnoroom <- ifelse(data$last7dnoroom>0,1,0) # 看酒店和房型历史是否出现过满房订单；
data[is.na(data)] <- -1         # # 把一些因子的NA变成 -1
data <- mutate(data, ifelse(canuserooms<0,-1, canuserooms)
, htlnoroomrate_7d = ifelse(htlnoroomrate_7d>1 , 1 ,htlnoroomrate_7d)
, star=ifelse(star<0, 0, star)
, goldstar=ifelse(goldstar<0, 2, goldstar)
, price=ifelse(firstunitprice>1200, 12, 0)
, price=ifelse(firstunitprice>800 & firstunitprice<=1200 ,8,price)
, price=ifelse(firstunitprice>600 & firstunitprice<=800 ,6,price)
, price=ifelse(firstunitprice>400 & firstunitprice<=600,4,price)
, price=ifelse(firstunitprice>300 & firstunitprice<=400,3,price)
, price=ifelse(firstunitprice>200 & firstunitprice<=300,2,price)
, price=ifelse(firstunitprice<=200,1,price)
)
# 预测最后的的结果 ，只用一种模型来进行预测；
data$pred <- tryCatch(predict(virtualroom.sht, newdata= data, n.trees = best.virtualroom.sht, type="response") ,warning = 'predict error')
#  data$pred <- ifelse(data$htlnoroomorders_7d>=1, 1, data$pred)  # 同母酒店的现、预付酒店last7d无房的房量高于0
#  data$pred <- ifelse(data$last7dnoroom>=1, 1, data$pred)  # 同子酒店的last7d无房的房量高于0
return(list(orderid= data$orderid, score= data$pred))
}  else  {
return(list(orderid= -1, score= 99))
}
}
# calcReservedRoomForVendor("1431565225,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,-1.0, -1, -1.0, -1, -1, 0.022988505747126436, 174, 0.03910614525139665, 0.6, 5, 0.1312625250501002, 22,1, 4,-1,-1,-1, T, 5, 348.0")
calcReservedRoomForVendor("1431565225,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,-1.0, -1, -1.0, -1, -1, 0.022988505747126436, 174, 0.03910614525139665, 0.6, 5, 0.1312625250501002, 22,1, 4,-1,-1,-1, T, 5, 348.0")
calcReservedRoomForVendor(" 1431564050,0.08781000226736069,0.0021300017833709717,0.0,9.999945759773254E-4,0.207069993019104,0.10634999722242355,0.207069993019104,-1,0.2222222222222222, 6, 0.04294478527607362, 0, 8, 0.016901408450704224, 355, 0.04185351270553064, 0.07006369426751592, 314, 0.016709511568123392")
calcReservedRoomForVendor(" 1431564050,0.08781000226736069,0.0021300017833709717,0.0,9.999945759773254E-4,0.207069993019104,0.10634999722242355,0.207069993019104,-1,0.2222222222222222, 6, 0.04294478527607362, 0, 8, 0.016901408450704224, 355, 0.04185351270553064, 0.07006369426751592, 314, 0.016709511568123392, 22,0, 5,2,5,163, T, 1, 806.0")
calcReservedRoomForVendor(" 1565045829,0.2030699998140335,1.5999376773834229E-4,0.0,0.0,0.23863999545574188,0.10209000110626221,0.23863999545574188,-1,0.3793103448275862, 1, -1.0, 0, 5, 0.3619631901840491, 326, 0.2046242774566474, 0.10946196660482375, 539, 0.1237785016286645, 10,4, 3,2,3,0, F, 3, 268.0")
calcReservedRoomForVendor(" 1565094921,0.07378000020980835,0.0025700032711029053,0.0,0.006200000643730164,0.11537999659776688,0.10510999709367752,0.11537999659776688,-1,-1.0, 0, -1.0, 0, 0, 0.08179419525065963, 379, 0.08051948051948052, 0.0, 6, 0.06818181818181818, 13,1, 3,3,3,142, F, 3, 175.0")
calcReservedRoomForVendor("1565053876,0.06565000116825104,1.6999989748001099E-4,0.0,-2.200007438659668E-4,0.2239599972963333,0.06655000150203705,0.2239599972963333,-1,-1.0, 0, -1.0, 0, 0, 0.031746031746031744, 126, 0.02702702702702703, 0.0, 22, 0.023529411764705882, 11,0, 3,5,3,46, T, 3, 217.0")
calcReservedRoomForVendor("1565187397,0.0826599970459938,0.0,0.0,0.0,0.0826599970459938,0.0,0.0,-1,0.0, 0, -1.0, 0, 0, 0.1450381679389313, 131, 0.11627906976744186, 0.024390243902439025, 41, 0.15789473684210525, 16,0, 3,2,3,25, F, -1, 596.0")
cbind(rocv1.0,rocv5.0)
View(cbind(rocv1.0,rocv5.0))
calcReservedRoomForVendor("1565187397,0.0826599970459938,0.0,0.0,0.0,0.0826599970459938,0.0,0.0,-1,0.0, 0, -1.0, 0, 0, 0.1450381679389313, 131, 0.11627906976744186, 0.024390243902439025, 41, 0.15789473684210525, 16,0, 3,2,3,25, F, -1, 596.0")
p <- p+ggtitle("准确率&召回率走势图")+theme(title = element_text(face="bold", size=15))+geom_abline(intercept=0.99 , slope=0 ,color='red')
p
ggplot(data=score41.htl)+geom_histogram(aes(x= daysdiff, fill= factor(isfullroom)),position ="dodge")
library(dplyr)
# library(gbm)
library(ggplot2)
library(magrittr)
library(xgboost)
library(data.table)
library(ROCR)
library(caret)
library(zoo)
#  找出为什么会出现30天无订单这个结果，可以解决问题；
# rm(list=ls())
setwd("/home/pjpan/virtualroom/DirectModelRetrain/score41")
# load("./ProdScripts/ReservedRoomv5.0.RData")
# source("./ProdScripts/calcReservedRoom.R")
# 设置字符串不自动变成factor，导致出错
options(stringsAsFactors = F)
# 用read.table速度较慢
score41 <- fread(input ="./directmodelscore41_0924_1020.txt", header = T, na.strings = "NULL", sep="\t", stringsAsFactors = F)
names(score41)
# 对输入变量进行拆分；
score41.htl.raw <- strsplit(filter(score41,hotelbelongto!='SHT')$modelinputparameter, ',')
score41.htl <- as.data.frame(do.call(rbind,score41.htl.raw), stringsAsFactors = F) #  设置字符串不为factor
# 重命名列名
names(score41.htl) <- c('orderid',
'room_sumorder',
'room_noroomsumorder',
'htl_noroomsumorder',
'htl_sumorder',
'roompct',
'room_last7dnoroom',
'room_last7dsumorder',
'room_last3dnoroom',
'room_last3dsumorder',
'htl_last7dnoroom',
'htl_last7dsumorder',
'htl_last3dnoroom',
'htl_last3dsumorder',
'hotelroomquantity',
'roomquantity',
'maxroomorder',
'maxhtlorder',
'maxroom_noroomsumorder',
'maxhtl_noroomsumorder',
'maxroomorder_r30d',
'maxhtlorder_r30d',
'htlroompct',
'roomnoroompct',
'htlnoroompct',
'htlsmtpct',
'roomhtlsmtpct',
'room_noroomrate',
'htl_noroomrate',
'room_last7doccupyrate',
'room_last7dnoroomrate',
'room_last3dnoroomrate',
'room_last3doccupyrate',
'htl_last7dnoroomrate',
'htl_last3dnoroomrate',
'last1ynoroomrate',
'masterhtlnoroomrate',
'maxroompct',
'maxroomnoroompct',
'maxhtlnoroompct',
'maxhtlroompct',
'maxroomhtlsmtpct',
'maxroompct_r30d',
'maxhtlroompct_r30d',
'maxroomhtlsmtpct_r30d',
'cityi',
'gcity',
'zonei',
'gzone',
'zonestari',
'intense',
'gintense',
'intenseprec',
'elongroomstatus',
'province',
'level',
'ordprior',
'ordroomnum',
'orddays',
'guarantee',
'recommendlevel',
'defaultrecommendlevel',
'balancetype',
'ordroomstatus',
'ordhour',
'isweekday',
'goldstar',
'cprflag',
'hotelbelongto',
'star',
'orddaysbefhol',
'orddaysafthol',
'avldaysbefhol',
'avldaysafthol',
'ispromotion',
'arrivalhour'  )
# pred <-  as.data.frame(calcReservedRoom(score41$modelinputparameter))  # 直接用原来的模型效果不佳
score41.htl <- cbind(score41.htl
, isshadoworder = score41$isshadoworder
, openyear = score41$openyear
, effectdate = score41$effectdate
, now = score41$d
)
#  transform variables
score41.htl <- mutate(score41.htl
, isfullroom = ifelse(score41$cancelreason=='NOROOM',1,0)
, daysdiff = as.integer(difftime(now, effectdate, units = "days"))
) # 赋值目标变量；
ggplot(data=score41.htl)+geom_histogram(aes(x= daysdiff, fill= factor(isfullroom)),position ="dodge")
ggplot(data=score41.htl)+geom_density(aes(x= daysdiff, fill= factor(isfullroom)),position ="dodge")
score41.htl%>%count(daysdiff<365, isfullroom)%>%mutate(pct=n/sum(n))
score41.htl%>%count(daysdiff<600, isfullroom)%>%mutate(pct=n/sum(n))
library(dplyr)
# library(gbm)
library(ggplot2)
library(magrittr)
library(xgboost)
library(data.table)
library(ROCR)
library(caret)
library(zoo)
#  找出为什么会出现30天无订单这个结果，可以解决问题；
# rm(list=ls())
setwd("/home/pjpan/virtualroom/DirectModelRetrain/score41")
# load("./ProdScripts/ReservedRoomv5.0.RData")
# source("./ProdScripts/calcReservedRoom.R")
# 设置字符串不自动变成factor，导致出错
options(stringsAsFactors = F)
# 用read.table速度较慢
score41 <- fread(input ="./directmodelscore41_0924_1020.txt", header = T, na.strings = "NULL", sep="\t", stringsAsFactors = F)
names(score41)
# 对输入变量进行拆分；
score41.htl.raw <- strsplit(filter(score41,hotelbelongto!='SHT')$modelinputparameter, ',')
score41.htl <- as.data.frame(do.call(rbind,score41.htl.raw), stringsAsFactors = F) #  设置字符串不为factor
# 重命名列名
names(score41.htl) <- c('orderid',
'room_sumorder',
'room_noroomsumorder',
'htl_noroomsumorder',
'htl_sumorder',
'roompct',
'room_last7dnoroom',
'room_last7dsumorder',
'room_last3dnoroom',
'room_last3dsumorder',
'htl_last7dnoroom',
'htl_last7dsumorder',
'htl_last3dnoroom',
'htl_last3dsumorder',
'hotelroomquantity',
'roomquantity',
'maxroomorder',
'maxhtlorder',
'maxroom_noroomsumorder',
'maxhtl_noroomsumorder',
'maxroomorder_r30d',
'maxhtlorder_r30d',
'htlroompct',
'roomnoroompct',
'htlnoroompct',
'htlsmtpct',
'roomhtlsmtpct',
'room_noroomrate',
'htl_noroomrate',
'room_last7doccupyrate',
'room_last7dnoroomrate',
'room_last3dnoroomrate',
'room_last3doccupyrate',
'htl_last7dnoroomrate',
'htl_last3dnoroomrate',
'last1ynoroomrate',
'masterhtlnoroomrate',
'maxroompct',
'maxroomnoroompct',
'maxhtlnoroompct',
'maxhtlroompct',
'maxroomhtlsmtpct',
'maxroompct_r30d',
'maxhtlroompct_r30d',
'maxroomhtlsmtpct_r30d',
'cityi',
'gcity',
'zonei',
'gzone',
'zonestari',
'intense',
'gintense',
'intenseprec',
'elongroomstatus',
'province',
'level',
'ordprior',
'ordroomnum',
'orddays',
'guarantee',
'recommendlevel',
'defaultrecommendlevel',
'balancetype',
'ordroomstatus',
'ordhour',
'isweekday',
'goldstar',
'cprflag',
'hotelbelongto',
'star',
'orddaysbefhol',
'orddaysafthol',
'avldaysbefhol',
'avldaysafthol',
'ispromotion',
'arrivalhour'  )
# pred <-  as.data.frame(calcReservedRoom(score41$modelinputparameter))  # 直接用原来的模型效果不佳
score41.htl <- cbind(score41.htl
, isshadoworder = score41$isshadoworder
, openyear = score41$openyear
, effectdate = score41$effectdate
, now = score41$d
)
summary(score41.htl$isshadoworder)
str(score41.htl$isshadoworder)
score41.htl%>%count(isshadoworder)
# version 2.0 ,add price,factor(star),delete rules
# old: 0.057436224  new：0.06423432
# calcReservedRoomForVendor("1565187397,0.0826599970459938,0.0,0.0,0.0,0.0826599970459938,0.0,0.0,-1,0.0, 0, -1.0, 0, 0, 0.1450381679389313, 131, 0.11627906976744186, 0.024390243902439025, 41, 0.15789473684210525, 16,0, 3,2,3,25, F, -1, 596.0")
calcReservedRoomForVendor <- function(inParam)
{
# package申明；
if(!require(gbm)) install.packages("gbm")
if(!require(dplyr)) install.packages("dplyr")
#package的引用
library(gbm)
library(dplyr)
options(stringsAsFactors = FALSE) #  char类型不要自动转化成 factor
# setwd(getwd())
# rm(list=ls())
# debug
load("/home/pjpan/shtmodel/ProdScripts/ReservedRoomForVendor.RData")
# load data-Versions1
if(is.character(inParam))
{
rawdata <- strsplit(c(inParam), ",")
data <- as.data.frame(do.call(rbind, rawdata))
}
if(length(data) == 29)
{
names(data) <- c(
"orderid",
"cityi",
"gcity",
"gintense",
"gzone",
"intense",
"zonei",
"zonestari",
"htlnoroomorders_7d",
"htlnoroomrate_7d",
"last3droom_sht",
"last3droompct",
"last7dnoroom",
"last7droom_sht",
"htlnoroomrate_60d",
"htlorders_60d",
"noroomrate_60d",
"shtnoroomrate_60d",
"shtorders_60d",
"zonenoroomrate_3d",
"ordhour",
"ordprior",
"recommendlevel",
"goldstar",
"star",
"roomquantity",
"freesale",
"canuserooms",
"firstunitprice"
)
# View(data)
# transform the data
# string -> numeric
data$cityi <- as.numeric(data$cityi)
data$gcity <- as.numeric(data$gcity)
data$gintense <- as.numeric(data$gintense)
data$gzone <- as.numeric(data$gzone)
data$intense <- as.numeric(data$intense)
data$zonei <- as.numeric(data$zonei)
data$zonestari <- as.numeric(data$zonestari)
data$htlnoroomrate_7d <- as.numeric(data$htlnoroomrate_7d)
data$shtnoroomrate_60d <- as.numeric(data$shtnoroomrate_60d)
data$noroomrate_60d <- as.numeric(data$noroomrate_60d)
data$last3droompct <- as.numeric(data$last3droompct)
data$htlnoroomrate_60d <- as.numeric(data$htlnoroomrate_60d)
data$zonenoroomrate_3d <- as.numeric(data$zonenoroomrate_3d)
data$freesale <- as.character(data$freesale)
# # string -> integer
data$htlnoroomorders_7d <- as.integer(data$htlnoroomorders_7d)
data$last3droom_sht <- as.integer(data$last3droom_sht)
data$last7dnoroom <- as.integer(data$last7dnoroom)
data$last7droom_sht <- as.integer(data$last7droom_sht)
data$htlorders_60d <- as.integer(data$htlorders_60d)
data$roomquantity <- as.integer(data$roomquantity)
data$canuserooms <- as.integer(data$canuserooms)
data$firstunitprice <- as.integer(data$firstunitprice)
# # string -> factor
data$ordhour <- as.integer(data$ordhour)
data$star <- as.integer(data$star)
data$goldstar <- as.integer(data$goldstar)
data$recommendlevel <- as.integer(data$recommendlevel)
data$ordprior <- as.integer(data$ordprior)
data$shtorders_60d <- as.integer(data$shtorders_60d)
# transform metrics
data$recommendlevel <- ifelse(data$recommendlevel>= 11 | data$recommendlevel <= 0 | is.na(data$recommendlevel), -1
, data$recommendlevel)  #  超过10 和小于0的看做一类别，跟其他类别的量级持平；
data$last3droompct <- ifelse(data$last3droompct > 1, 1, data$last3droompct)
# data$last3droom_sht <- ifelse(data$last3droom_sht >= 7 , 7, data$last3droom_sht)
# data$bin_hasreserved <- ifelse(data$canuserooms>0,1,0)
# data$bin_roomhasnoroom <- ifelse(data$last7dnoroom>0,1,0) # 看酒店和房型历史是否出现过满房订单；
data[is.na(data)] <- -1         # # 把一些因子的NA变成 -1
data <- mutate(data, ifelse(canuserooms<0,-1, canuserooms)
, htlnoroomrate_7d = ifelse(htlnoroomrate_7d>1 , 1 ,htlnoroomrate_7d)
, star=ifelse(star<0, 0, star)
, goldstar=ifelse(goldstar<0, 2, goldstar)
, price=ifelse(firstunitprice>1200, 12, 0)
, price=ifelse(firstunitprice>800 & firstunitprice<=1200 ,8,price)
, price=ifelse(firstunitprice>600 & firstunitprice<=800 ,6,price)
, price=ifelse(firstunitprice>400 & firstunitprice<=600,4,price)
, price=ifelse(firstunitprice>300 & firstunitprice<=400,3,price)
, price=ifelse(firstunitprice>200 & firstunitprice<=300,2,price)
, price=ifelse(firstunitprice<=200,1,price)
)
# 预测最后的的结果 ，只用一种模型来进行预测；
data$pred <- tryCatch(predict(virtualroom.sht, newdata= data, n.trees = best.virtualroom.sht, type="response") ,warning = 'predict error')
#  data$pred <- ifelse(data$htlnoroomorders_7d>=1, 1, data$pred)  # 同母酒店的现、预付酒店last7d无房的房量高于0
#  data$pred <- ifelse(data$last7dnoroom>=1, 1, data$pred)  # 同子酒店的last7d无房的房量高于0
return(list(orderid= data$orderid, score= data$pred))
}  else  {
return(list(orderid= -1, score= 99))
}
}
calcReservedRoomForVendor("1569401041,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1,-1.0, 0, -1.0, 0, 0, 0.11627906976744186, 86, 0.1826625386996904, 0.20675105485232068, 237, 0.17883211678832117, 0,72, 4,2,3,8, F, 2, 604.0")
trainMatrix <- train[,lapply(.SD,as.numeric)] %>% as.matrix
library(ggplot2)
score41.htl <- mutate(score41.htl
, isfullroom = ifelse(score41$cancelreason=='NOROOM',1,0)
, daysdiff = as.integer(difftime(now, effectdate, units = "days"))
) # 赋值目标变量；
View(select(head(filter(score41.htl,daysdiff<0 )),openyear,now,daysdiff,effectdate))
train <- createDataPartition(score41.htl$isfullroom, p = 0.6, list = F)
score41.htl.train <- score41.htl[train,]
score41.htl.test <- score41.htl[-train,]
