library("igraph", lib.loc="C:/Program Files/R/R-3.1.2/library")
graph.data.frame(data1)
str(g)
graph.data.frame
data <- data[,c(2:7)]
save(data,mapp,file = './conf/utils.RData')
rm(list=ls())
shiny::runApp()
load('./conf/utils.RData')
network = data
save(network, mapp, file='./conf/utils.RData')
shiny::runApp()
data
shiny::runApp()
g <- graph.data.frame(data1)
data1 <- data
g <- graph.data.frame(data1)
g <- graph.data.frame(data1, directed = F)
shiny::runApp()
## A simple example with a couple of actors
## The typical case is that these tables are read in from files....
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
"Esmeralda"),
age=c(48,33,45,34,21),
gender=c("F","M","F","M","F"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
same.dept=c(FALSE,FALSE,TRUE,FALSE,FALSE,TRUE),
friendship=c(4,5,5,2,1,1), advice=c(4,5,5,4,2,3))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
## The opposite operation
as_data_frame(g, what="vertices")
as_data_frame(g, what="edges")
runExample()
runExample(04_mpg)
runExample("04_mpg")
runExample("05_sliders")
shiny::runApp()
shiny::runApp()
runExample("05_sliders")
runExample("05_sliders")
runExample("05_sliders")
runExample()
runExample("06_tabsets")
dim(network)
length(network)
nrow(network)
shiny::runApp()
shiny::runApp()
data <- dataInput()
dataInput <- reactive({
if(input$name == "all"){
data <- network
n <- nrow(network)
}else{
data <- subset(network,network$sourceName == input$name|network$targetName == input$name,
select = sourceName:weight)
n = input$obs
}
})
data <- dataInput()
shiny::runApp()
dist(50)
dist(rnorm)
dist(rnorm())
dist
shiny::runApp()
shiny::runApp()
degree(g)
shiny::runApp()
names(network)
network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ))
network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
network%>%inner_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
data <- network
data1 <- data
g <- graph.data.frame(data1, directed = F)
g$weight
g
print(g, e=TRUE, v=TRUE)
E(g)
as_data_frame(g, what = 'attr')
as_data_frame(g, what = 'vertices')
as_data_frame(g, what = 'edges')
graph_attr_names(g)
E(g)
str()
str(E(g))
adjm <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), nc=10)
g1 <- graph_from_adjacency_matrix( adjm )
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), nc=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
E(g2)$weight
E(g2)
E(g2)
shiny::runApp()
shiny::runApp()
demo(error.catching)
shiny::runApp()
V(g)
E(g)
shiny::runApp()
degree(g)
shiny::runApp()
load('./data/utils.RData')
shiny::runApp()
network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
rainbow(10)
V(G)$color <- sample(rainbow(9),9,replace=FALSE)
sample(rainbow(9),9,replace=FALSE)
read/table('./data/NewBI.txt',sep='\t')
read.table('./data/NewBI.txt',sep='\t')
read.table('./data/NewBI.txt',sep='\t', header = T)
data <- read.table('./data/NewBI.txt',sep='\t', header = T)
str(data)
namedept <- distinct(data[,c('targetName','dep')])
data <- read.table('./data/NewBI.txt',sep='\t', header = T,stringsAsFactors = F)
namedept <- distinct(data[,c('targetName','dep')])
View(namedept)
View(data)
data <- read.table('./data/NewBI.txt',sep='\t', header = T,stringsAsFactors = F, encoding = "UTF8")
namedept <- distinct(data[,c('targetName','dep')])
View(data)
data <- read.table('./data/NewBI.txt',sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
, fileEncoding = "UTF8"
)
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
namedept <- distinct(data[,c('targetName','dep')])
View(namedept)
head(namedept)
distinct(data$dep)
unique(data$dep)
sample(rainbow(9),9, replace=FALSE)
ranbow(length(unique(data$dep))
)
rainbow(length(unique(data$dep)))
unique(data$dep)
colormap <- cbind(dep=unique(data$dep), color=rainbow(length(unique(data$dep)))
)
colormap
colormap <- as.data.frame(cbind(dep=unique(data$dep),color=rainbow(length(unique(data$dep)))))
colormap <- as.data.frame(cbind(dep=unique(data$dep),color=rainbow(length(unique(data$dep)))),stringsAsFactors = F)
left_join(data,colormap,c("dep"="dep"))
shiny::runApp()
save(data , colormap , file ='./conf/utils.RData')
colormap
namedept
colormap
View(namedept)
namedept
E(g)$wight
E(g)
shiny::runApp()
shiny::runApp()
shiny::runApp()
parent.frame()
shiny::runApp()
env
dev.size("cm")
dev.size("px")
colormap
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
View(data)
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
shiny::runApp()
network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
write.table(x=network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
,file='./data/merge.txt'
)
write.table(x=network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
,file='./data/merge.txt'
,row.names = F
)
write.table(x=network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy =T)
,file='./data/merge.txt'
,row.names = F
)
data1 <- data
g <- graph.data.frame(data, directed = F )
g
num1 = data %>% group_by(sourceName) %>% summarise(num1 = n())
num2 = edges %>% group_by(targetName) %>% summarise(num2 = n())
num2 = data %>% group_by(targetName) %>% summarise(num2 = n())
View(head(num1),10)
View(head(num1,10))
num1 = data %>% group_by(sourceName) %>% summarise(num1 = avg(weight))
num1 = data %>% group_by(sourceName) %>% summarise(num1 = average(weight))
num1 = data %>% group_by(sourceName) %>% summarise(num1 = mean(weight))
View(head(num1,10))
num1 = data %>% group_by(sourceName) %>% summarise(num1 = sum(weight))
View(head(num1,10))
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
data <- read.table('./data/NewBI.txt'
, sep=','
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
data <- read.table('./data/NewBI.txt'
, sep=','
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
data <- read.table('./data/NewBI.txt'
, sep=','
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
load('./conf/utils.RData')
names(data)
data <- select(data, sourceName,targetName,type,id,label,weight,dep)
save(data, mapp, file = './conf/utils.RData')
save(data,mapp,colormap,file ='./conf/utils.RData' )
data
V(g)$dep
E(g)
g <- graph.data.frame(data, directed = F )
E(g)
colormap
left_join(data,colormap,c("dep"="dep"))
left_join(data,colormap,c("dep"="dep"))$color
V(g)
shiny::runApp()
colormap
data
colormap
left_join(data,colormap,c("dep"="dep"))
data$weight
shiny::runApp()
rm(list=ls())
load('./conf/utils.RData')
left_join(data,colormap,c("dep"="dep"))$color
shiny::runApp()
save(colormap,data,mapp,file ='./conf/utils.RData')
rm(list=ls())
shiny::runApp()
load('./conf/utils.RData')
network = data
save(network,colormap,mapp,file ='./conf/utils.RData')
shiny::runApp()
rm(list=ls())
load('./conf/utils.RData')
shiny::runApp()
vcount(g)
shiny::runApp()
namedept <- distinct(data[,c('targetName','dep')])
namedept <- distinct(network[,c('targetName','dep')])
left_join(network, namedept,by = c("sourceNmae"='targetName'))
namedept
network$dep <- left_join(network, namedept,by = c("sourceName"="targetName"))$
network$dep
network
left_join(network, namedept,by = c("sourceName"="targetName"))
network$dep <- left_join(network, namedept,by = c("sourceName"="targetName"))$dep
save(network,colormap,mapp,file ='./conf/utils.RData')
shiny::runApp()
network
network$dep <- left_join(network, namedept,by = c("targetName"="targetName"))$dep
save(network,colormap,mapp,file ='./conf/utils.RData')
shiny::runApp()
rm(list=ls())
load('./conf/utils.RData')
left_join(network, namedept,by = c("targetName"="targetName"))$dep
left_join(network, namedept,by = c("targetName"="targetName"))
namedept <- distinct(network[,c('targetName','dep')])
distinct(network[,c('targetName','dep')])
network
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
data <- read.table('./data/NewBI.txt'
, sep='\t'
, header = T
, stringsAsFactors = F
, encoding = "UTF8"
)
network <- data
save(network,colormap,mapp,file ='./conf/utils.RData')
shiny::runApp()
shiny::runApp()
network%>%left_join(network,network, by = c("sourceName" = "targetName", "targetName" = "sourceName" ) ,copy = F)
runApp()
library(shiny)
runApp()
load('./conf/utils.RData')
Nodes <- Nodes
allnodes <- union(data$sourceName,data$targetName)
Nodes$isexists <- Nodes$Label %in% allnodes
Nodes <- Nodes %>% filter(isexists == TRUE)%>% select(Label:Modularity.Class)%>% mutate(Modularity.Class = as.character(Modularity.Class))
Nodes <- mutate(Nodes, color = left_join(Nodes, groupcolor, by = c("Modularity.Class"="group"))$color) # 给每个节点赋颜色属性；
g <- graph_from_data_frame(data, directed= F , vertices=Nodes)
data <- network
Nodes <- Nodes
allnodes <- union(data$sourceName,data$targetName)
Nodes$isexists <- Nodes$Label %in% allnodes
Nodes <- Nodes %>% filter(isexists == TRUE)%>% select(Label:Modularity.Class)%>% mutate(Modularity.Class = as.character(Modularity.Class))
Nodes <- mutate(Nodes, color = left_join(Nodes, groupcolor, by = c("Modularity.Class"="group"))$color) # 给每个节点赋颜色属性；
g <- graph_from_data_frame(data, directed= F , vertices=Nodes)
groupnum <- length(unique(Nodes$Modularity.Class))   # 看一下社团类别
groupcolor <- as.data.frame(cbind(color=rainbow(groupnum),group = as.integer(unique(Nodes$Modularity.Class))),stringsAsFactors = F) # 生成不同社团的随机颜色；
Nodes <- Nodes
allnodes <- union(data$sourceName,data$targetName)
Nodes$isexists <- Nodes$Label %in% allnodes
Nodes <- Nodes %>% filter(isexists == TRUE)%>% select(Label:Modularity.Class)%>% mutate(Modularity.Class = as.character(Modularity.Class))
Nodes <- mutate(Nodes, color = left_join(Nodes, groupcolor, by = c("Modularity.Class"="group"))$color) # 给每个节点赋颜色属性；
g <- graph_from_data_frame(data, directed= F , vertices=Nodes)
max(vertex_attr(g,"PageRank"))
runApp()
load('./conf/utils.RData')
filter(Nodes,Label =='赵华')$PageRank <- 0.01124424
library(shiny)
library(igraph)
library(dplyr)
filter(Nodes,Label =='赵华')$PageRank <- 0.01124424
filter(Nodes,Label =='赵华')$PageRank <- 0.01124424
filter(Nodes,Label =='赵华')$PageRank
filter(Nodes,Label =='赵华')$PageRank <- 0.01124424
filter(Nodes,Label =='赵华')$PageRank = 0.01124424
filter(Nodes,Label =='赵华')$PageRank
Nodes["赵华",]
Nodes[Label=="赵华",]
filter(Nodes,Label =='赵华')
View(Nodes)
Nodes[109,]
Nodes[109,11] <- 0.01124424
save(network,colormap,Nodes,file ='./conf/utils.RData')
runApp()
runApp()
runApp()
data <- filter(data, sourceName=='赵华'|targetName=='赵华')
target = NULL
for(i in 1:nrow(data))
{
if(data[i,"sourceName"]==gsub(" ","",input$name)){
target <<- data[i,"targetName"]
}else {
target <<- data[i,"targetName"]
}
}
target = NULL
for(i in 1:nrow(data))
{
{
if(data[i,"sourceName"]==gsub(" ","",input$name)){
target <<- data[i,"targetName"]
}else {
target <<- data[i,"targetName"]
}
}
}
target = NULL
for(i in 1:nrow(data))
{
if(data[i,"sourceName"]==gsub(" ","",'赵华')){
target <<- data[i,"targetName"]
}else {
target <<- data[i,"targetName"]
}
}
target
nrow(data)
data
target = NULL
for(i in 1:nrow(data))
{
if(data[i,"sourceName"]==gsub(" ","",'赵华')){
target <<- data[i,"targetName"]
}else {
target <<- data[i,"sourceName"]
}
}
target
target = NULL
for(i in 1:nrow(data))
{
if(data[i,"sourceName"]==gsub(" ","",'赵华')){
target <<- rbind(target,data[i,"targetName"])
}else {
target <<- rbind(target,data[i,"sourceName"])
}
}
target
as.data.frame(rbind(target = target , weight = data$weight))
target
data$weight
as.data.frame(cbind(target = target , weight = data$weight))
as.data.frame(cbind(target = target , weight = data$weight))
as.data.frame(cbind(target = target , weight = data$weight),row.names = c("target","weight"))
runApp(,port=4033)
runApp(,port=4033)
data$target <- target
target
runApp(,port=4033)
runApp(,port=4033)
data$target <- target
target
data$target
data$target
runApp(,port=4033)
runApp(,port=4033)
runApp(,port=4033)
data <- mutate(data, target=ifelse(sourceName==gsub(" ","",input$name),targetName,sourceName))
runApp(,port=4033)
data <- subset(network, network$sourceName == '赵华')|network$targetName == '赵华'))
data <- subset(network, network$sourceName == '赵华')|network$targetName == '赵华')
data <- subset(network, network$sourceName == '赵华'|network$targetName == '赵华')
data%>%mutate(data, target=ifelse(sourceName==gsub(" ","",input$name),targetName,sourceName))
for(i in 1:nrow(data))
{
if(data[i,"sourceName"]==gsub(" ","",input$name)){
data$target <- data[i,"targetName"]
}else {
data$target <- data[i,"sourceName"]
}
}
runApp(,port=4033)
runApp(,port=4033)
runApp(,port=4033)
runApp(,port=4033)
left_join(data,y=Nodes,by=c("target"="Lable")
left_join(data,y=Nodes,by=c("target"="Lable"))
left_join(data,y=Nodes,by=c("target"="Lable"))
left_join(data,Nodes,by=c("target"="Label")$PageRank)
left_join(data,Nodes,by=c("target"="Label"))
data
Nodes
runApp(,port=4033)
runApp(,port=4033)
runApp(,port=4033)
library(shiny)
library(igraph)
library(dplyr)
# Define server logic required to summarize and view the selected dataset
load('./conf/utils.RData')
groupnum <- length(unique(Nodes$Modularity.Class))   # 看一下社团类别
groupcolor <- as.data.frame(cbind(color=rainbow(groupnum),group = as.integer(unique(Nodes$Modularity.Class))),stringsAsFactors = F) # 生成不同社团的随机颜色；
data <- network
Nodes <- Nodes
allnodes <- union(data$sourceName,data$targetName)
Nodes$isexists <- Nodes$Label %in% allnodes
Nodes <- Nodes %>% filter(isexists == TRUE)%>% select(Label:Modularity.Class)%>% mutate(Modularity.Class = as.character(Modularity.Class))
Nodes <- mutate(Nodes, color = left_join(Nodes, groupcolor, by = c("Modularity.Class"="group"))$color) # 给每个节点赋颜色属性；
g <- graph_from_data_frame(data, directed= F , vertices=Nodes)
page.rank(g)
page.rank(g)$vector
g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
g <- add_edges(g, c(1,6, 1,11, 6, 11))
wtc <- cluster_walktrap(g)
modularity(wtc)
modularity(g, membership(wtc))
modularity
g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
g <- add_edges(g, c(1,6, 1,11, 6, 11))
wtc <- cluster_walktrap(g)
modularity(wtc)
modularity(g, membership(wtc))
wtc
cluster_walktrap(g)
g <- graph_from_data_frame(data, directed= F , vertices=Nodes)
page.rank(g)$vector
cluster_walktrap(g)
g
cluster_walktrap(g,weights = weight)
data <- network
g <- graph_from_data_frame(data, directed= F , vertices=Nodes)
page.rank(g)$vector
View(page.rank(g)$vector)
View(unlist(page.rank(g)$vector))
